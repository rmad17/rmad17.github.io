<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tech on Svādhyāya</title>
    <link>http://localhost:1313/categories/tech/</link>
    <description>Recent content in Tech on Svādhyāya</description>
    <image>
      <title>Svādhyāya</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 06 Sep 2025 01:00:28 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Database Design for Products</title>
      <link>http://localhost:1313/posts/database-design/</link>
      <pubDate>Sat, 06 Sep 2025 01:00:28 +0530</pubDate>
      <guid>http://localhost:1313/posts/database-design/</guid>
      <description>Database Design: A Product-First Approach to Building Scalable Systems Over the years wrestling with database architectures I&amp;rsquo;ve learned that the most elegant technical solution isn&amp;rsquo;t always the right one. Database design is often viewed through the lens of technical optimization—normalized tables, efficient indexes, and query performance. While these technical aspects are crucial, the database disasters I&amp;rsquo;ve witnessed taught me that the most successful architectures emerge from a deep understanding of the product they serve.</description>
    </item>
    <item>
      <title>Google Login Using Go and Gin</title>
      <link>http://localhost:1313/posts/google-login-using-go-and-gin/</link>
      <pubDate>Tue, 30 Jul 2024 22:48:24 +0530</pubDate>
      <guid>http://localhost:1313/posts/google-login-using-go-and-gin/</guid>
      <description>In this blog we will learn about how to get started with Golang and create a auth with Google Login. We will be using the Gin and gorm ORM. During my initial uses of Gin I felt for new users the documentation is not friendly enough, hence I decided to write this article. If you are coming from a Python/Ruby world Gin is NOT like Django or Rails. Rather, its more like Flask and Sinatra.</description>
    </item>
    <item>
      <title>Deploy Your Application With AWS AutoScalingGroup</title>
      <link>http://localhost:1313/posts/deploy-your-application-with-aws-autoscalinggroup/</link>
      <pubDate>Fri, 10 May 2024 00:06:26 +0530</pubDate>
      <guid>http://localhost:1313/posts/deploy-your-application-with-aws-autoscalinggroup/</guid>
      <description>In my previous post I wrote about process of pre deployment. A common question was about the deployment process itself. And the idea of this blog was born. The following is a non exhaustive common list of ways to deploy to cloud.
In a single VM instance. For eg. Droplet(Digital Ocean), EC2(AWS), Compute Engine(GCP), etc. In one or more VM instances with autoscaling. Not all cloud providers currently support this. AWS, GCP and Azure currently does it.</description>
    </item>
    <item>
      <title>Application Deployment Checklist</title>
      <link>http://localhost:1313/posts/application-deployment-checklist/</link>
      <pubDate>Sat, 20 Apr 2024 10:18:04 +0530</pubDate>
      <guid>http://localhost:1313/posts/application-deployment-checklist/</guid>
      <description>Your app is built and you need to deploy it. What Next? Read On...
Before we deploy applications we need to follow a set of process to ensure our application stack is prepared for any expected or unexpected events. Over the years I have experienced these scenarios and I have created a set of my personal checklists which allow me to quickly check that my application has all the requirements for recovering from potential pitfalls.</description>
    </item>
  </channel>
</rss>
